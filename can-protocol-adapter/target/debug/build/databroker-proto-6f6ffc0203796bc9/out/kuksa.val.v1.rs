// This file is @generated by prost-build.
/// Describes a VSS entry
/// When requesting an entry, the amount of information returned can
/// be controlled by specifying either a `View` or a set of `Field`s.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DataEntry {
    /// Defines the full VSS path of the entry.
    ///
    /// \[field: FIELD_PATH\]
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    /// The value (datapoint)
    ///
    /// \[field: FIELD_VALUE\]
    #[prost(message, optional, tag = "2")]
    pub value: ::core::option::Option<Datapoint>,
    /// Actuator target (only used if the entry is an actuator)
    ///
    /// \[field: FIELD_ACTUATOR_TARGET\]
    #[prost(message, optional, tag = "3")]
    pub actuator_target: ::core::option::Option<Datapoint>,
    /// Metadata for this entry
    ///
    /// \[field: FIELD_METADATA\]
    #[prost(message, optional, tag = "10")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Datapoint {
    #[prost(message, optional, tag = "1")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(
        oneof = "datapoint::Value",
        tags = "11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28"
    )]
    pub value: ::core::option::Option<datapoint::Value>,
}
/// Nested message and enum types in `Datapoint`.
pub mod datapoint {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(string, tag = "11")]
        String(::prost::alloc::string::String),
        #[prost(bool, tag = "12")]
        Bool(bool),
        #[prost(sint32, tag = "13")]
        Int32(i32),
        #[prost(sint64, tag = "14")]
        Int64(i64),
        #[prost(uint32, tag = "15")]
        Uint32(u32),
        #[prost(uint64, tag = "16")]
        Uint64(u64),
        #[prost(float, tag = "17")]
        Float(f32),
        #[prost(double, tag = "18")]
        Double(f64),
        #[prost(message, tag = "21")]
        StringArray(super::StringArray),
        #[prost(message, tag = "22")]
        BoolArray(super::BoolArray),
        #[prost(message, tag = "23")]
        Int32Array(super::Int32Array),
        #[prost(message, tag = "24")]
        Int64Array(super::Int64Array),
        #[prost(message, tag = "25")]
        Uint32Array(super::Uint32Array),
        #[prost(message, tag = "26")]
        Uint64Array(super::Uint64Array),
        #[prost(message, tag = "27")]
        FloatArray(super::FloatArray),
        #[prost(message, tag = "28")]
        DoubleArray(super::DoubleArray),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Metadata {
    /// Data type
    /// The VSS data type of the entry (i.e. the value, min, max etc).
    ///
    /// NOTE: protobuf doesn't have int8, int16, uint8 or uint16 which means
    /// that these values must be serialized as int32 and uint32 respectively.
    ///
    /// \[field: FIELD_METADATA_DATA_TYPE\]
    #[prost(enumeration = "DataType", tag = "11")]
    pub data_type: i32,
    /// Entry type
    ///
    /// \[field: FIELD_METADATA_ENTRY_TYPE\]
    #[prost(enumeration = "EntryType", tag = "12")]
    pub entry_type: i32,
    /// Description
    /// Describes the meaning and content of the entry.
    ///
    /// \[field: FIELD_METADATA_DESCRIPTION\]
    #[prost(string, optional, tag = "13")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    /// Comment \[optional\]
    /// A comment can be used to provide additional informal information
    /// on a entry.
    ///
    /// \[field: FIELD_METADATA_COMMENT\]
    #[prost(string, optional, tag = "14")]
    pub comment: ::core::option::Option<::prost::alloc::string::String>,
    /// Deprecation \[optional\]
    /// Whether this entry is deprecated. Can contain recommendations of what
    /// to use instead.
    ///
    /// \[field: FIELD_METADATA_DEPRECATION\]
    #[prost(string, optional, tag = "15")]
    pub deprecation: ::core::option::Option<::prost::alloc::string::String>,
    /// Unit \[optional\]
    /// The unit of measurement
    ///
    /// \[field: FIELD_METADATA_UNIT\]
    #[prost(string, optional, tag = "16")]
    pub unit: ::core::option::Option<::prost::alloc::string::String>,
    /// Value restrictions \[optional\]
    /// Restrict which values are allowed.
    /// Only restrictions matching the DataType {datatype} above are valid.
    ///
    /// \[field: FIELD_METADATA_VALUE_RESTRICTION\]
    #[prost(message, optional, tag = "17")]
    pub value_restriction: ::core::option::Option<ValueRestriction>,
    /// Entry type specific metadata
    #[prost(oneof = "metadata::EntrySpecific", tags = "20, 30, 40")]
    pub entry_specific: ::core::option::Option<metadata::EntrySpecific>,
}
/// Nested message and enum types in `Metadata`.
pub mod metadata {
    /// Entry type specific metadata
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum EntrySpecific {
        /// \[field: FIELD_METADATA_ACTUATOR\]
        #[prost(message, tag = "20")]
        Actuator(super::Actuator),
        /// \[field: FIELD_METADATA_SENSOR\]
        #[prost(message, tag = "30")]
        Sensor(super::Sensor),
        /// \[field: FIELD_METADATA_ATTRIBUTE\]
        #[prost(message, tag = "40")]
        Attribute(super::Attribute),
    }
}
/// /////////////////////
/// Actuator specific fields
///
/// Nothing for now
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Actuator {}
/// //////////////////////
/// Sensor specific
///
/// Nothing for now
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sensor {}
/// //////////////////////
/// Attribute specific
///
/// Nothing for now.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Attribute {}
/// Value restriction
///
/// One ValueRestriction{type} for each type, since
/// they don't make sense unless the types match
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValueRestriction {
    #[prost(oneof = "value_restriction::Type", tags = "21, 22, 23, 24")]
    pub r#type: ::core::option::Option<value_restriction::Type>,
}
/// Nested message and enum types in `ValueRestriction`.
pub mod value_restriction {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Type {
        #[prost(message, tag = "21")]
        String(super::ValueRestrictionString),
        /// For signed VSS integers
        #[prost(message, tag = "22")]
        Signed(super::ValueRestrictionInt),
        /// For unsigned VSS integers
        #[prost(message, tag = "23")]
        Unsigned(super::ValueRestrictionUint),
        /// For floating point VSS values (float and double)
        #[prost(message, tag = "24")]
        FloatingPoint(super::ValueRestrictionFloat),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValueRestrictionInt {
    #[prost(sint64, optional, tag = "1")]
    pub min: ::core::option::Option<i64>,
    #[prost(sint64, optional, tag = "2")]
    pub max: ::core::option::Option<i64>,
    #[prost(sint64, repeated, tag = "3")]
    pub allowed_values: ::prost::alloc::vec::Vec<i64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValueRestrictionUint {
    #[prost(uint64, optional, tag = "1")]
    pub min: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub max: ::core::option::Option<u64>,
    #[prost(uint64, repeated, tag = "3")]
    pub allowed_values: ::prost::alloc::vec::Vec<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValueRestrictionFloat {
    #[prost(double, optional, tag = "1")]
    pub min: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "2")]
    pub max: ::core::option::Option<f64>,
    /// allowed for doubles/floats not recommended
    #[prost(double, repeated, tag = "3")]
    pub allowed_values: ::prost::alloc::vec::Vec<f64>,
}
/// min, max doesn't make much sense for a string
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValueRestrictionString {
    #[prost(string, repeated, tag = "3")]
    pub allowed_values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Error response shall be an HTTP-like code.
/// Should follow <https://www.w3.org/TR/viss2-transport/#status-codes.>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Error {
    #[prost(uint32, tag = "1")]
    pub code: u32,
    #[prost(string, tag = "2")]
    pub reason: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
/// Used in get/set requests to report errors for specific entries
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DataEntryError {
    /// vss path
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<Error>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StringArray {
    #[prost(string, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoolArray {
    #[prost(bool, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<bool>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Int32Array {
    #[prost(sint32, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Int64Array {
    #[prost(sint64, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<i64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Uint32Array {
    #[prost(uint32, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Uint64Array {
    #[prost(uint64, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FloatArray {
    #[prost(float, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<f32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoubleArray {
    #[prost(double, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<f64>,
}
/// VSS Data type of a signal
///
/// Protobuf doesn't support int8, int16, uint8 or uint16.
/// These are mapped to int32 and uint32 respectively.
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DataType {
    Unspecified = 0,
    String = 1,
    Boolean = 2,
    Int8 = 3,
    Int16 = 4,
    Int32 = 5,
    Int64 = 6,
    Uint8 = 7,
    Uint16 = 8,
    Uint32 = 9,
    Uint64 = 10,
    Float = 11,
    Double = 12,
    Timestamp = 13,
    StringArray = 20,
    BooleanArray = 21,
    Int8Array = 22,
    Int16Array = 23,
    Int32Array = 24,
    Int64Array = 25,
    Uint8Array = 26,
    Uint16Array = 27,
    Uint32Array = 28,
    Uint64Array = 29,
    FloatArray = 30,
    DoubleArray = 31,
    TimestampArray = 32,
}
impl DataType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DataType::Unspecified => "DATA_TYPE_UNSPECIFIED",
            DataType::String => "DATA_TYPE_STRING",
            DataType::Boolean => "DATA_TYPE_BOOLEAN",
            DataType::Int8 => "DATA_TYPE_INT8",
            DataType::Int16 => "DATA_TYPE_INT16",
            DataType::Int32 => "DATA_TYPE_INT32",
            DataType::Int64 => "DATA_TYPE_INT64",
            DataType::Uint8 => "DATA_TYPE_UINT8",
            DataType::Uint16 => "DATA_TYPE_UINT16",
            DataType::Uint32 => "DATA_TYPE_UINT32",
            DataType::Uint64 => "DATA_TYPE_UINT64",
            DataType::Float => "DATA_TYPE_FLOAT",
            DataType::Double => "DATA_TYPE_DOUBLE",
            DataType::Timestamp => "DATA_TYPE_TIMESTAMP",
            DataType::StringArray => "DATA_TYPE_STRING_ARRAY",
            DataType::BooleanArray => "DATA_TYPE_BOOLEAN_ARRAY",
            DataType::Int8Array => "DATA_TYPE_INT8_ARRAY",
            DataType::Int16Array => "DATA_TYPE_INT16_ARRAY",
            DataType::Int32Array => "DATA_TYPE_INT32_ARRAY",
            DataType::Int64Array => "DATA_TYPE_INT64_ARRAY",
            DataType::Uint8Array => "DATA_TYPE_UINT8_ARRAY",
            DataType::Uint16Array => "DATA_TYPE_UINT16_ARRAY",
            DataType::Uint32Array => "DATA_TYPE_UINT32_ARRAY",
            DataType::Uint64Array => "DATA_TYPE_UINT64_ARRAY",
            DataType::FloatArray => "DATA_TYPE_FLOAT_ARRAY",
            DataType::DoubleArray => "DATA_TYPE_DOUBLE_ARRAY",
            DataType::TimestampArray => "DATA_TYPE_TIMESTAMP_ARRAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DATA_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "DATA_TYPE_STRING" => Some(Self::String),
            "DATA_TYPE_BOOLEAN" => Some(Self::Boolean),
            "DATA_TYPE_INT8" => Some(Self::Int8),
            "DATA_TYPE_INT16" => Some(Self::Int16),
            "DATA_TYPE_INT32" => Some(Self::Int32),
            "DATA_TYPE_INT64" => Some(Self::Int64),
            "DATA_TYPE_UINT8" => Some(Self::Uint8),
            "DATA_TYPE_UINT16" => Some(Self::Uint16),
            "DATA_TYPE_UINT32" => Some(Self::Uint32),
            "DATA_TYPE_UINT64" => Some(Self::Uint64),
            "DATA_TYPE_FLOAT" => Some(Self::Float),
            "DATA_TYPE_DOUBLE" => Some(Self::Double),
            "DATA_TYPE_TIMESTAMP" => Some(Self::Timestamp),
            "DATA_TYPE_STRING_ARRAY" => Some(Self::StringArray),
            "DATA_TYPE_BOOLEAN_ARRAY" => Some(Self::BooleanArray),
            "DATA_TYPE_INT8_ARRAY" => Some(Self::Int8Array),
            "DATA_TYPE_INT16_ARRAY" => Some(Self::Int16Array),
            "DATA_TYPE_INT32_ARRAY" => Some(Self::Int32Array),
            "DATA_TYPE_INT64_ARRAY" => Some(Self::Int64Array),
            "DATA_TYPE_UINT8_ARRAY" => Some(Self::Uint8Array),
            "DATA_TYPE_UINT16_ARRAY" => Some(Self::Uint16Array),
            "DATA_TYPE_UINT32_ARRAY" => Some(Self::Uint32Array),
            "DATA_TYPE_UINT64_ARRAY" => Some(Self::Uint64Array),
            "DATA_TYPE_FLOAT_ARRAY" => Some(Self::FloatArray),
            "DATA_TYPE_DOUBLE_ARRAY" => Some(Self::DoubleArray),
            "DATA_TYPE_TIMESTAMP_ARRAY" => Some(Self::TimestampArray),
            _ => None,
        }
    }
}
/// Entry type
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EntryType {
    Unspecified = 0,
    Attribute = 1,
    Sensor = 2,
    Actuator = 3,
}
impl EntryType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            EntryType::Unspecified => "ENTRY_TYPE_UNSPECIFIED",
            EntryType::Attribute => "ENTRY_TYPE_ATTRIBUTE",
            EntryType::Sensor => "ENTRY_TYPE_SENSOR",
            EntryType::Actuator => "ENTRY_TYPE_ACTUATOR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ENTRY_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "ENTRY_TYPE_ATTRIBUTE" => Some(Self::Attribute),
            "ENTRY_TYPE_SENSOR" => Some(Self::Sensor),
            "ENTRY_TYPE_ACTUATOR" => Some(Self::Actuator),
            _ => None,
        }
    }
}
/// A `View` specifies a set of fields which should
/// be populated in a `DataEntry` (in a response message)
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum View {
    /// Unspecified. Equivalent to VIEW_CURRENT_VALUE unless `fields` are explicitly set.
    Unspecified = 0,
    /// Populate DataEntry with value.
    CurrentValue = 1,
    /// Populate DataEntry with actuator target.
    TargetValue = 2,
    /// Populate DataEntry with metadata.
    Metadata = 3,
    /// Populate DataEntry only with requested fields.
    Fields = 10,
    /// Populate DataEntry with everything.
    All = 20,
}
impl View {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            View::Unspecified => "VIEW_UNSPECIFIED",
            View::CurrentValue => "VIEW_CURRENT_VALUE",
            View::TargetValue => "VIEW_TARGET_VALUE",
            View::Metadata => "VIEW_METADATA",
            View::Fields => "VIEW_FIELDS",
            View::All => "VIEW_ALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VIEW_UNSPECIFIED" => Some(Self::Unspecified),
            "VIEW_CURRENT_VALUE" => Some(Self::CurrentValue),
            "VIEW_TARGET_VALUE" => Some(Self::TargetValue),
            "VIEW_METADATA" => Some(Self::Metadata),
            "VIEW_FIELDS" => Some(Self::Fields),
            "VIEW_ALL" => Some(Self::All),
            _ => None,
        }
    }
}
/// A `Field` corresponds to a specific field of a `DataEntry`.
///
/// It can be used to:
///    * populate only specific fields of a `DataEntry` response.
///    * specify which fields of a `DataEntry` should be set as
///      part of a `Set` request.
///    * subscribe to only specific fields of a data entry.
///    * convey which fields of an updated `DataEntry` have changed.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Field {
    /// "*" i.e. everything
    Unspecified = 0,
    /// path
    Path = 1,
    /// value
    Value = 2,
    /// actuator_target
    ActuatorTarget = 3,
    /// metadata.*
    Metadata = 10,
    /// metadata.data_type
    MetadataDataType = 11,
    /// metadata.description
    MetadataDescription = 12,
    /// metadata.entry_type
    MetadataEntryType = 13,
    /// metadata.comment
    MetadataComment = 14,
    /// metadata.deprecation
    MetadataDeprecation = 15,
    /// metadata.unit
    MetadataUnit = 16,
    /// metadata.value_restriction.*
    MetadataValueRestriction = 17,
    /// metadata.actuator.*
    MetadataActuator = 20,
    /// metadata.sensor.*
    MetadataSensor = 30,
    /// metadata.attribute.*
    MetadataAttribute = 40,
}
impl Field {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Field::Unspecified => "FIELD_UNSPECIFIED",
            Field::Path => "FIELD_PATH",
            Field::Value => "FIELD_VALUE",
            Field::ActuatorTarget => "FIELD_ACTUATOR_TARGET",
            Field::Metadata => "FIELD_METADATA",
            Field::MetadataDataType => "FIELD_METADATA_DATA_TYPE",
            Field::MetadataDescription => "FIELD_METADATA_DESCRIPTION",
            Field::MetadataEntryType => "FIELD_METADATA_ENTRY_TYPE",
            Field::MetadataComment => "FIELD_METADATA_COMMENT",
            Field::MetadataDeprecation => "FIELD_METADATA_DEPRECATION",
            Field::MetadataUnit => "FIELD_METADATA_UNIT",
            Field::MetadataValueRestriction => "FIELD_METADATA_VALUE_RESTRICTION",
            Field::MetadataActuator => "FIELD_METADATA_ACTUATOR",
            Field::MetadataSensor => "FIELD_METADATA_SENSOR",
            Field::MetadataAttribute => "FIELD_METADATA_ATTRIBUTE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIELD_UNSPECIFIED" => Some(Self::Unspecified),
            "FIELD_PATH" => Some(Self::Path),
            "FIELD_VALUE" => Some(Self::Value),
            "FIELD_ACTUATOR_TARGET" => Some(Self::ActuatorTarget),
            "FIELD_METADATA" => Some(Self::Metadata),
            "FIELD_METADATA_DATA_TYPE" => Some(Self::MetadataDataType),
            "FIELD_METADATA_DESCRIPTION" => Some(Self::MetadataDescription),
            "FIELD_METADATA_ENTRY_TYPE" => Some(Self::MetadataEntryType),
            "FIELD_METADATA_COMMENT" => Some(Self::MetadataComment),
            "FIELD_METADATA_DEPRECATION" => Some(Self::MetadataDeprecation),
            "FIELD_METADATA_UNIT" => Some(Self::MetadataUnit),
            "FIELD_METADATA_VALUE_RESTRICTION" => Some(Self::MetadataValueRestriction),
            "FIELD_METADATA_ACTUATOR" => Some(Self::MetadataActuator),
            "FIELD_METADATA_SENSOR" => Some(Self::MetadataSensor),
            "FIELD_METADATA_ATTRIBUTE" => Some(Self::MetadataAttribute),
            _ => None,
        }
    }
}
/// Define which data we want
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntryRequest {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(enumeration = "View", tag = "2")]
    pub view: i32,
    #[prost(enumeration = "Field", repeated, tag = "3")]
    pub fields: ::prost::alloc::vec::Vec<i32>,
}
/// Request a set of entries.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRequest {
    #[prost(message, repeated, tag = "1")]
    pub entries: ::prost::alloc::vec::Vec<EntryRequest>,
}
/// Global errors are specified in `error`.
/// Errors for individual entries are specified in `errors`.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResponse {
    #[prost(message, repeated, tag = "1")]
    pub entries: ::prost::alloc::vec::Vec<DataEntry>,
    #[prost(message, repeated, tag = "2")]
    pub errors: ::prost::alloc::vec::Vec<DataEntryError>,
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<Error>,
}
/// Define the data we want to set
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntryUpdate {
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<DataEntry>,
    #[prost(enumeration = "Field", repeated, tag = "2")]
    pub fields: ::prost::alloc::vec::Vec<i32>,
}
/// A list of entries to be updated
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetRequest {
    #[prost(message, repeated, tag = "1")]
    pub updates: ::prost::alloc::vec::Vec<EntryUpdate>,
}
/// Global errors are specified in `error`.
/// Errors for individual entries are specified in `errors`.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetResponse {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub errors: ::prost::alloc::vec::Vec<DataEntryError>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamedUpdateRequest {
    #[prost(message, repeated, tag = "1")]
    pub updates: ::prost::alloc::vec::Vec<EntryUpdate>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamedUpdateResponse {
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<Error>,
    #[prost(message, repeated, tag = "2")]
    pub errors: ::prost::alloc::vec::Vec<DataEntryError>,
}
/// Define what to subscribe to
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeEntry {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(enumeration = "View", tag = "2")]
    pub view: i32,
    #[prost(enumeration = "Field", repeated, tag = "3")]
    pub fields: ::prost::alloc::vec::Vec<i32>,
}
/// Subscribe to changes in datapoints.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeRequest {
    #[prost(message, repeated, tag = "1")]
    pub entries: ::prost::alloc::vec::Vec<SubscribeEntry>,
}
/// A subscription response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeResponse {
    #[prost(message, repeated, tag = "1")]
    pub updates: ::prost::alloc::vec::Vec<EntryUpdate>,
}
/// Nothing yet
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetServerInfoRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetServerInfoResponse {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod val_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ValClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ValClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ValClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ValClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            ValClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Get entries
        pub async fn get(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRequest>,
        ) -> std::result::Result<tonic::Response<super::GetResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/kuksa.val.v1.VAL/Get");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("kuksa.val.v1.VAL", "Get"));
            self.inner.unary(req, path, codec).await
        }
        /// Set entries
        pub async fn set(
            &mut self,
            request: impl tonic::IntoRequest<super::SetRequest>,
        ) -> std::result::Result<tonic::Response<super::SetResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/kuksa.val.v1.VAL/Set");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("kuksa.val.v1.VAL", "Set"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn streamed_update(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::StreamedUpdateRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::StreamedUpdateResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/kuksa.val.v1.VAL/StreamedUpdate",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("kuksa.val.v1.VAL", "StreamedUpdate"));
            self.inner.streaming(req, path, codec).await
        }
        /// Subscribe to a set of entries
        ///
        /// Returns a stream of notifications.
        ///
        /// InvalidArgument is returned if the request is malformed.
        pub async fn subscribe(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SubscribeResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/kuksa.val.v1.VAL/Subscribe",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("kuksa.val.v1.VAL", "Subscribe"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Shall return information that allows the client to determine
        /// what server/server implementation/version it is talking to
        /// eg. kuksa-databroker 0.5.1
        pub async fn get_server_info(
            &mut self,
            request: impl tonic::IntoRequest<super::GetServerInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetServerInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/kuksa.val.v1.VAL/GetServerInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("kuksa.val.v1.VAL", "GetServerInfo"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod val_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ValServer.
    #[async_trait]
    pub trait Val: Send + Sync + 'static {
        /// Get entries
        async fn get(
            &self,
            request: tonic::Request<super::GetRequest>,
        ) -> std::result::Result<tonic::Response<super::GetResponse>, tonic::Status>;
        /// Set entries
        async fn set(
            &self,
            request: tonic::Request<super::SetRequest>,
        ) -> std::result::Result<tonic::Response<super::SetResponse>, tonic::Status>;
        /// Server streaming response type for the StreamedUpdate method.
        type StreamedUpdateStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::StreamedUpdateResponse, tonic::Status>,
            >
            + Send
            + 'static;
        async fn streamed_update(
            &self,
            request: tonic::Request<tonic::Streaming<super::StreamedUpdateRequest>>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamedUpdateStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the Subscribe method.
        type SubscribeStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::SubscribeResponse, tonic::Status>,
            >
            + Send
            + 'static;
        /// Subscribe to a set of entries
        ///
        /// Returns a stream of notifications.
        ///
        /// InvalidArgument is returned if the request is malformed.
        async fn subscribe(
            &self,
            request: tonic::Request<super::SubscribeRequest>,
        ) -> std::result::Result<tonic::Response<Self::SubscribeStream>, tonic::Status>;
        /// Shall return information that allows the client to determine
        /// what server/server implementation/version it is talking to
        /// eg. kuksa-databroker 0.5.1
        async fn get_server_info(
            &self,
            request: tonic::Request<super::GetServerInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetServerInfoResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct ValServer<T: Val> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Val> ValServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ValServer<T>
    where
        T: Val,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/kuksa.val.v1.VAL/Get" => {
                    #[allow(non_camel_case_types)]
                    struct GetSvc<T: Val>(pub Arc<T>);
                    impl<T: Val> tonic::server::UnaryService<super::GetRequest>
                    for GetSvc<T> {
                        type Response = super::GetResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Val>::get(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/kuksa.val.v1.VAL/Set" => {
                    #[allow(non_camel_case_types)]
                    struct SetSvc<T: Val>(pub Arc<T>);
                    impl<T: Val> tonic::server::UnaryService<super::SetRequest>
                    for SetSvc<T> {
                        type Response = super::SetResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Val>::set(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/kuksa.val.v1.VAL/StreamedUpdate" => {
                    #[allow(non_camel_case_types)]
                    struct StreamedUpdateSvc<T: Val>(pub Arc<T>);
                    impl<
                        T: Val,
                    > tonic::server::StreamingService<super::StreamedUpdateRequest>
                    for StreamedUpdateSvc<T> {
                        type Response = super::StreamedUpdateResponse;
                        type ResponseStream = T::StreamedUpdateStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::StreamedUpdateRequest>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Val>::streamed_update(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StreamedUpdateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/kuksa.val.v1.VAL/Subscribe" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribeSvc<T: Val>(pub Arc<T>);
                    impl<
                        T: Val,
                    > tonic::server::ServerStreamingService<super::SubscribeRequest>
                    for SubscribeSvc<T> {
                        type Response = super::SubscribeResponse;
                        type ResponseStream = T::SubscribeStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubscribeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Val>::subscribe(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SubscribeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/kuksa.val.v1.VAL/GetServerInfo" => {
                    #[allow(non_camel_case_types)]
                    struct GetServerInfoSvc<T: Val>(pub Arc<T>);
                    impl<T: Val> tonic::server::UnaryService<super::GetServerInfoRequest>
                    for GetServerInfoSvc<T> {
                        type Response = super::GetServerInfoResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetServerInfoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Val>::get_server_info(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetServerInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Val> Clone for ValServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Val> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Val> tonic::server::NamedService for ValServer<T> {
        const NAME: &'static str = "kuksa.val.v1.VAL";
    }
}
