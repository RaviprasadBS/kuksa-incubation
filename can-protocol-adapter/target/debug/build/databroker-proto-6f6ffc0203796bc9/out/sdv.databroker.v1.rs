// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StringArray {
    #[prost(string, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoolArray {
    #[prost(bool, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<bool>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Int32Array {
    #[prost(sint32, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Int64Array {
    #[prost(sint64, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<i64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Uint32Array {
    #[prost(uint32, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Uint64Array {
    #[prost(uint64, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FloatArray {
    #[prost(float, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<f32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoubleArray {
    #[prost(double, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<f64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Datapoint {
    /// Timestamp of the value
    #[prost(message, optional, tag = "1")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// values
    #[prost(
        oneof = "datapoint::Value",
        tags = "10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28"
    )]
    pub value: ::core::option::Option<datapoint::Value>,
}
/// Nested message and enum types in `Datapoint`.
pub mod datapoint {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Failure {
        /// The data point is known, but doesn't have a valid value
        InvalidValue = 0,
        /// The data point is known, but no value is available
        NotAvailable = 1,
        /// Unknown datapoint
        UnknownDatapoint = 2,
        /// Access denied
        AccessDenied = 3,
        /// Unexpected internal error
        InternalError = 4,
    }
    impl Failure {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Failure::InvalidValue => "INVALID_VALUE",
                Failure::NotAvailable => "NOT_AVAILABLE",
                Failure::UnknownDatapoint => "UNKNOWN_DATAPOINT",
                Failure::AccessDenied => "ACCESS_DENIED",
                Failure::InternalError => "INTERNAL_ERROR",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "INVALID_VALUE" => Some(Self::InvalidValue),
                "NOT_AVAILABLE" => Some(Self::NotAvailable),
                "UNKNOWN_DATAPOINT" => Some(Self::UnknownDatapoint),
                "ACCESS_DENIED" => Some(Self::AccessDenied),
                "INTERNAL_ERROR" => Some(Self::InternalError),
                _ => None,
            }
        }
    }
    /// values
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(enumeration = "Failure", tag = "10")]
        FailureValue(i32),
        #[prost(string, tag = "11")]
        StringValue(::prost::alloc::string::String),
        #[prost(bool, tag = "12")]
        BoolValue(bool),
        #[prost(sint32, tag = "13")]
        Int32Value(i32),
        #[prost(sint64, tag = "14")]
        Int64Value(i64),
        #[prost(uint32, tag = "15")]
        Uint32Value(u32),
        #[prost(uint64, tag = "16")]
        Uint64Value(u64),
        #[prost(float, tag = "17")]
        FloatValue(f32),
        #[prost(double, tag = "18")]
        DoubleValue(f64),
        #[prost(message, tag = "21")]
        StringArray(super::StringArray),
        #[prost(message, tag = "22")]
        BoolArray(super::BoolArray),
        #[prost(message, tag = "23")]
        Int32Array(super::Int32Array),
        #[prost(message, tag = "24")]
        Int64Array(super::Int64Array),
        #[prost(message, tag = "25")]
        Uint32Array(super::Uint32Array),
        #[prost(message, tag = "26")]
        Uint64Array(super::Uint64Array),
        #[prost(message, tag = "27")]
        FloatArray(super::FloatArray),
        #[prost(message, tag = "28")]
        DoubleArray(super::DoubleArray),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Allowed {
    #[prost(oneof = "allowed::Values", tags = "1, 3, 4, 5, 6, 7, 8")]
    pub values: ::core::option::Option<allowed::Values>,
}
/// Nested message and enum types in `Allowed`.
pub mod allowed {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Values {
        #[prost(message, tag = "1")]
        StringValues(super::StringArray),
        #[prost(message, tag = "3")]
        Int32Values(super::Int32Array),
        #[prost(message, tag = "4")]
        Int64Values(super::Int64Array),
        #[prost(message, tag = "5")]
        Uint32Values(super::Uint32Array),
        #[prost(message, tag = "6")]
        Uint64Values(super::Uint64Array),
        #[prost(message, tag = "7")]
        FloatValues(super::FloatArray),
        #[prost(message, tag = "8")]
        DoubleValues(super::DoubleArray),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Metadata {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(enumeration = "EntryType", tag = "2")]
    pub entry_type: i32,
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration = "DataType", tag = "5")]
    pub data_type: i32,
    /// CONTINUOUS or STATIC or ON_CHANGE
    #[prost(enumeration = "ChangeType", tag = "6")]
    pub change_type: i32,
    #[prost(string, tag = "7")]
    pub description: ::prost::alloc::string::String,
    /// int32             min_update_hz       = 10; // Only for CONTINUOUS
    /// int32             max_update_hz       = 11; // Only for CONTINUOUS
    #[prost(message, optional, tag = "10")]
    pub allowed: ::core::option::Option<Allowed>,
}
/// Data type of a signal
///
/// Protobuf doesn't support int8, int16, uint8 or uint16.
/// These are mapped to sint32 and uint32 respectively.
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DataType {
    String = 0,
    Bool = 1,
    Int8 = 2,
    Int16 = 3,
    Int32 = 4,
    Int64 = 5,
    Uint8 = 6,
    Uint16 = 7,
    Uint32 = 8,
    Uint64 = 9,
    Float = 10,
    Double = 11,
    StringArray = 20,
    BoolArray = 21,
    Int8Array = 22,
    Int16Array = 23,
    Int32Array = 24,
    Int64Array = 25,
    Uint8Array = 26,
    Uint16Array = 27,
    Uint32Array = 28,
    Uint64Array = 29,
    FloatArray = 30,
    DoubleArray = 31,
}
impl DataType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DataType::String => "STRING",
            DataType::Bool => "BOOL",
            DataType::Int8 => "INT8",
            DataType::Int16 => "INT16",
            DataType::Int32 => "INT32",
            DataType::Int64 => "INT64",
            DataType::Uint8 => "UINT8",
            DataType::Uint16 => "UINT16",
            DataType::Uint32 => "UINT32",
            DataType::Uint64 => "UINT64",
            DataType::Float => "FLOAT",
            DataType::Double => "DOUBLE",
            DataType::StringArray => "STRING_ARRAY",
            DataType::BoolArray => "BOOL_ARRAY",
            DataType::Int8Array => "INT8_ARRAY",
            DataType::Int16Array => "INT16_ARRAY",
            DataType::Int32Array => "INT32_ARRAY",
            DataType::Int64Array => "INT64_ARRAY",
            DataType::Uint8Array => "UINT8_ARRAY",
            DataType::Uint16Array => "UINT16_ARRAY",
            DataType::Uint32Array => "UINT32_ARRAY",
            DataType::Uint64Array => "UINT64_ARRAY",
            DataType::FloatArray => "FLOAT_ARRAY",
            DataType::DoubleArray => "DOUBLE_ARRAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STRING" => Some(Self::String),
            "BOOL" => Some(Self::Bool),
            "INT8" => Some(Self::Int8),
            "INT16" => Some(Self::Int16),
            "INT32" => Some(Self::Int32),
            "INT64" => Some(Self::Int64),
            "UINT8" => Some(Self::Uint8),
            "UINT16" => Some(Self::Uint16),
            "UINT32" => Some(Self::Uint32),
            "UINT64" => Some(Self::Uint64),
            "FLOAT" => Some(Self::Float),
            "DOUBLE" => Some(Self::Double),
            "STRING_ARRAY" => Some(Self::StringArray),
            "BOOL_ARRAY" => Some(Self::BoolArray),
            "INT8_ARRAY" => Some(Self::Int8Array),
            "INT16_ARRAY" => Some(Self::Int16Array),
            "INT32_ARRAY" => Some(Self::Int32Array),
            "INT64_ARRAY" => Some(Self::Int64Array),
            "UINT8_ARRAY" => Some(Self::Uint8Array),
            "UINT16_ARRAY" => Some(Self::Uint16Array),
            "UINT32_ARRAY" => Some(Self::Uint32Array),
            "UINT64_ARRAY" => Some(Self::Uint64Array),
            "FLOAT_ARRAY" => Some(Self::FloatArray),
            "DOUBLE_ARRAY" => Some(Self::DoubleArray),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DatapointError {
    UnknownDatapoint = 0,
    InvalidType = 1,
    AccessDenied = 2,
    InternalError = 3,
    OutOfBounds = 4,
}
impl DatapointError {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DatapointError::UnknownDatapoint => "UNKNOWN_DATAPOINT",
            DatapointError::InvalidType => "INVALID_TYPE",
            DatapointError::AccessDenied => "ACCESS_DENIED",
            DatapointError::InternalError => "INTERNAL_ERROR",
            DatapointError::OutOfBounds => "OUT_OF_BOUNDS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN_DATAPOINT" => Some(Self::UnknownDatapoint),
            "INVALID_TYPE" => Some(Self::InvalidType),
            "ACCESS_DENIED" => Some(Self::AccessDenied),
            "INTERNAL_ERROR" => Some(Self::InternalError),
            "OUT_OF_BOUNDS" => Some(Self::OutOfBounds),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EntryType {
    Unspecified = 0,
    Sensor = 1,
    Actuator = 2,
    Attribute = 3,
}
impl EntryType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            EntryType::Unspecified => "ENTRY_TYPE_UNSPECIFIED",
            EntryType::Sensor => "ENTRY_TYPE_SENSOR",
            EntryType::Actuator => "ENTRY_TYPE_ACTUATOR",
            EntryType::Attribute => "ENTRY_TYPE_ATTRIBUTE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ENTRY_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "ENTRY_TYPE_SENSOR" => Some(Self::Sensor),
            "ENTRY_TYPE_ACTUATOR" => Some(Self::Actuator),
            "ENTRY_TYPE_ATTRIBUTE" => Some(Self::Attribute),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChangeType {
    /// Value never changes
    Static = 0,
    /// Updates are provided every time the value changes (i.e.
    OnChange = 1,
    /// window is open / closed)
    ///
    /// Value is updated continuously. Broker needs to tell
    Continuous = 2,
}
impl ChangeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ChangeType::Static => "STATIC",
            ChangeType::OnChange => "ON_CHANGE",
            ChangeType::Continuous => "CONTINUOUS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATIC" => Some(Self::Static),
            "ON_CHANGE" => Some(Self::OnChange),
            "CONTINUOUS" => Some(Self::Continuous),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDatapointsRequest {
    /// A list of requested data points.
    #[prost(string, repeated, tag = "1")]
    pub datapoints: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDatapointsReply {
    /// Contains the values of the requested data points.
    /// If a requested data point is not available, the corresponding Datapoint
    /// will have the respective failure value set.
    #[prost(map = "string, message", tag = "1")]
    pub datapoints: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        Datapoint,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetDatapointsRequest {
    /// A map of data points to set
    #[prost(map = "string, message", tag = "1")]
    pub datapoints: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        Datapoint,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetDatapointsReply {
    /// A map of errors (if any)
    #[prost(map = "string, enumeration(DatapointError)", tag = "1")]
    pub errors: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeRequest {
    /// Subscribe to a set of data points (or expressions) described
    /// by the provided query.
    /// The query syntax is a subset of SQL and is described in more
    /// detail in the QUERY.md file.
    #[prost(string, tag = "2")]
    pub query: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeReply {
    /// Contains the fields specified by the query.
    /// If a requested data point value is not available, the corresponding
    /// Datapoint will have it's respective failure value set.
    #[prost(map = "string, message", tag = "1")]
    pub fields: ::std::collections::HashMap<::prost::alloc::string::String, Datapoint>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMetadataRequest {
    /// Request metadata for a list of data points referenced by their names.
    /// e.g. "Vehicle.Cabin.Seat.Row1.Pos1.Position" or "Vehicle.Speed".
    ///
    /// If no names are provided, metadata for all known data points will be
    /// returned.
    #[prost(string, repeated, tag = "1")]
    pub names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMetadataReply {
    /// Contains metadata of the requested data points. If a data point
    /// doesn't exist (i.e. not known to the Data Broker) the corresponding
    /// Metadata isn't part of the returned list.
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<Metadata>,
}
/// Generated client implementations.
pub mod broker_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct BrokerClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl BrokerClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> BrokerClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> BrokerClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            BrokerClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Request a set of datapoints (values)
        ///
        /// Returns a list of requested data points.
        ///
        /// InvalidArgument is returned if the request is malformed.
        pub async fn get_datapoints(
            &mut self,
            request: impl tonic::IntoRequest<super::GetDatapointsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetDatapointsReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sdv.databroker.v1.Broker/GetDatapoints",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sdv.databroker.v1.Broker", "GetDatapoints"));
            self.inner.unary(req, path, codec).await
        }
        /// Set a datapoint (values)
        pub async fn set_datapoints(
            &mut self,
            request: impl tonic::IntoRequest<super::SetDatapointsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetDatapointsReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sdv.databroker.v1.Broker/SetDatapoints",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sdv.databroker.v1.Broker", "SetDatapoints"));
            self.inner.unary(req, path, codec).await
        }
        /// Subscribe to a set of data points or conditional expressions
        /// using the Data Broker Query Syntax (described in QUERY.md)
        ///
        /// Returns a stream of replies.
        ///
        /// InvalidArgument is returned if the request is malformed.
        pub async fn subscribe(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SubscribeReply>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sdv.databroker.v1.Broker/Subscribe",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sdv.databroker.v1.Broker", "Subscribe"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Request the metadata of a set of datapoints
        ///
        /// Returns metadata of the requested data points that exist.
        pub async fn get_metadata(
            &mut self,
            request: impl tonic::IntoRequest<super::GetMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetMetadataReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sdv.databroker.v1.Broker/GetMetadata",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("sdv.databroker.v1.Broker", "GetMetadata"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod broker_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with BrokerServer.
    #[async_trait]
    pub trait Broker: Send + Sync + 'static {
        /// Request a set of datapoints (values)
        ///
        /// Returns a list of requested data points.
        ///
        /// InvalidArgument is returned if the request is malformed.
        async fn get_datapoints(
            &self,
            request: tonic::Request<super::GetDatapointsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetDatapointsReply>,
            tonic::Status,
        >;
        /// Set a datapoint (values)
        async fn set_datapoints(
            &self,
            request: tonic::Request<super::SetDatapointsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetDatapointsReply>,
            tonic::Status,
        >;
        /// Server streaming response type for the Subscribe method.
        type SubscribeStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::SubscribeReply, tonic::Status>,
            >
            + Send
            + 'static;
        /// Subscribe to a set of data points or conditional expressions
        /// using the Data Broker Query Syntax (described in QUERY.md)
        ///
        /// Returns a stream of replies.
        ///
        /// InvalidArgument is returned if the request is malformed.
        async fn subscribe(
            &self,
            request: tonic::Request<super::SubscribeRequest>,
        ) -> std::result::Result<tonic::Response<Self::SubscribeStream>, tonic::Status>;
        /// Request the metadata of a set of datapoints
        ///
        /// Returns metadata of the requested data points that exist.
        async fn get_metadata(
            &self,
            request: tonic::Request<super::GetMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetMetadataReply>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct BrokerServer<T: Broker> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Broker> BrokerServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for BrokerServer<T>
    where
        T: Broker,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/sdv.databroker.v1.Broker/GetDatapoints" => {
                    #[allow(non_camel_case_types)]
                    struct GetDatapointsSvc<T: Broker>(pub Arc<T>);
                    impl<
                        T: Broker,
                    > tonic::server::UnaryService<super::GetDatapointsRequest>
                    for GetDatapointsSvc<T> {
                        type Response = super::GetDatapointsReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetDatapointsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Broker>::get_datapoints(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetDatapointsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sdv.databroker.v1.Broker/SetDatapoints" => {
                    #[allow(non_camel_case_types)]
                    struct SetDatapointsSvc<T: Broker>(pub Arc<T>);
                    impl<
                        T: Broker,
                    > tonic::server::UnaryService<super::SetDatapointsRequest>
                    for SetDatapointsSvc<T> {
                        type Response = super::SetDatapointsReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetDatapointsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Broker>::set_datapoints(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SetDatapointsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sdv.databroker.v1.Broker/Subscribe" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribeSvc<T: Broker>(pub Arc<T>);
                    impl<
                        T: Broker,
                    > tonic::server::ServerStreamingService<super::SubscribeRequest>
                    for SubscribeSvc<T> {
                        type Response = super::SubscribeReply;
                        type ResponseStream = T::SubscribeStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubscribeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Broker>::subscribe(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SubscribeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sdv.databroker.v1.Broker/GetMetadata" => {
                    #[allow(non_camel_case_types)]
                    struct GetMetadataSvc<T: Broker>(pub Arc<T>);
                    impl<
                        T: Broker,
                    > tonic::server::UnaryService<super::GetMetadataRequest>
                    for GetMetadataSvc<T> {
                        type Response = super::GetMetadataReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetMetadataRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Broker>::get_metadata(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetMetadataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Broker> Clone for BrokerServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Broker> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Broker> tonic::server::NamedService for BrokerServer<T> {
        const NAME: &'static str = "sdv.databroker.v1.Broker";
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateDatapointsRequest {
    #[prost(map = "int32, message", tag = "1")]
    pub datapoints: ::std::collections::HashMap<i32, Datapoint>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateDatapointsReply {
    /// If empty, everything went well
    #[prost(map = "int32, enumeration(DatapointError)", tag = "1")]
    pub errors: ::std::collections::HashMap<i32, i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamDatapointsRequest {
    #[prost(map = "int32, message", tag = "1")]
    pub datapoints: ::std::collections::HashMap<i32, Datapoint>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamDatapointsReply {
    /// If empty, everything went well
    #[prost(map = "int32, enumeration(DatapointError)", tag = "1")]
    pub errors: ::std::collections::HashMap<i32, i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterDatapointsRequest {
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<RegistrationMetadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistrationMetadata {
    /// Name of the data point
    /// (e.g. "Vehicle.Cabin.Seat.Row1.Pos1.Position" or "Vehicle.Speed")
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration = "DataType", tag = "2")]
    pub data_type: i32,
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    #[prost(enumeration = "ChangeType", tag = "4")]
    pub change_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterDatapointsReply {
    /// Maps each data point name passed in RegisterDatapointsRequest to a data point id
    #[prost(map = "string, int32", tag = "1")]
    pub results: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
}
/// Generated client implementations.
pub mod collector_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct CollectorClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl CollectorClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> CollectorClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> CollectorClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            CollectorClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Register new datapoint (metadata)
        ///
        /// If the registration of at least one of the passed data point fails, the overall registration
        /// is rejected and the gRPC status code ABORTED is returned (to indicate the "aborted" registration).
        /// The details, which data point(s) caused the failure and the reason, is passed in back in human-
        /// readable form in the status message. Possible failure resaons are:
        ///  * PERMISSION_DENIED - Not allowed to register this name
        ///  * ALREADY_REGISTERED - The data point is already registered by some other feeder
        ///  * RE_REGISTRATION_MISMATCH - Already registered by this feeder but with differing metadata
        ///  * INVALID_NAME - The passed name of the datapoint has an invalid structure
        ///  * INVALID_VALUE_TYPE - The passed ValueType is not supported
        ///  * INVALID_CHANGE_TYPE - The passed ChangeType is not supported
        pub async fn register_datapoints(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterDatapointsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterDatapointsReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sdv.databroker.v1.Collector/RegisterDatapoints",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("sdv.databroker.v1.Collector", "RegisterDatapoints"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Provide a set of updated datapoint values to the broker.
        /// This is the unary equivalent of `StreamDatapoints` below and is better suited for cases
        /// where the frequency of updates is rather low.
        ///
        /// NOTE: The values provided in a single request are handled as a single update in the
        /// data broker. This ensures that any clients requesting (or subscribing to) a set of
        /// datapoints will get a consistent update, i.e. that either all values are updated or
        /// none are.
        ///
        /// Returns: any errors encountered updating the datapoints
        ///
        pub async fn update_datapoints(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateDatapointsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateDatapointsReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sdv.databroker.v1.Collector/UpdateDatapoints",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("sdv.databroker.v1.Collector", "UpdateDatapoints"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Provide a stream with updated datapoint values to the broker.
        /// This is the streaming equivalent of `UpdateDatapoints` above and is better suited for
        /// cases where the frequency of updates is high.
        ///
        /// NOTE: The values provided in a single request are handled as a single update in the
        /// data broker. This ensures that any clients requesting (or subscribing to) a set of
        /// datapoints will get a consistent update, i.e. that either all values are updated or
        /// none are.
        ///
        /// Returns: any errors encountered updating the datapoints
        ///
        pub async fn stream_datapoints(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::StreamDatapointsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::StreamDatapointsReply>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/sdv.databroker.v1.Collector/StreamDatapoints",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("sdv.databroker.v1.Collector", "StreamDatapoints"),
                );
            self.inner.streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod collector_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with CollectorServer.
    #[async_trait]
    pub trait Collector: Send + Sync + 'static {
        /// Register new datapoint (metadata)
        ///
        /// If the registration of at least one of the passed data point fails, the overall registration
        /// is rejected and the gRPC status code ABORTED is returned (to indicate the "aborted" registration).
        /// The details, which data point(s) caused the failure and the reason, is passed in back in human-
        /// readable form in the status message. Possible failure resaons are:
        ///  * PERMISSION_DENIED - Not allowed to register this name
        ///  * ALREADY_REGISTERED - The data point is already registered by some other feeder
        ///  * RE_REGISTRATION_MISMATCH - Already registered by this feeder but with differing metadata
        ///  * INVALID_NAME - The passed name of the datapoint has an invalid structure
        ///  * INVALID_VALUE_TYPE - The passed ValueType is not supported
        ///  * INVALID_CHANGE_TYPE - The passed ChangeType is not supported
        async fn register_datapoints(
            &self,
            request: tonic::Request<super::RegisterDatapointsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterDatapointsReply>,
            tonic::Status,
        >;
        /// Provide a set of updated datapoint values to the broker.
        /// This is the unary equivalent of `StreamDatapoints` below and is better suited for cases
        /// where the frequency of updates is rather low.
        ///
        /// NOTE: The values provided in a single request are handled as a single update in the
        /// data broker. This ensures that any clients requesting (or subscribing to) a set of
        /// datapoints will get a consistent update, i.e. that either all values are updated or
        /// none are.
        ///
        /// Returns: any errors encountered updating the datapoints
        ///
        async fn update_datapoints(
            &self,
            request: tonic::Request<super::UpdateDatapointsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateDatapointsReply>,
            tonic::Status,
        >;
        /// Server streaming response type for the StreamDatapoints method.
        type StreamDatapointsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::StreamDatapointsReply, tonic::Status>,
            >
            + Send
            + 'static;
        /// Provide a stream with updated datapoint values to the broker.
        /// This is the streaming equivalent of `UpdateDatapoints` above and is better suited for
        /// cases where the frequency of updates is high.
        ///
        /// NOTE: The values provided in a single request are handled as a single update in the
        /// data broker. This ensures that any clients requesting (or subscribing to) a set of
        /// datapoints will get a consistent update, i.e. that either all values are updated or
        /// none are.
        ///
        /// Returns: any errors encountered updating the datapoints
        ///
        async fn stream_datapoints(
            &self,
            request: tonic::Request<tonic::Streaming<super::StreamDatapointsRequest>>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamDatapointsStream>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct CollectorServer<T: Collector> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Collector> CollectorServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for CollectorServer<T>
    where
        T: Collector,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/sdv.databroker.v1.Collector/RegisterDatapoints" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterDatapointsSvc<T: Collector>(pub Arc<T>);
                    impl<
                        T: Collector,
                    > tonic::server::UnaryService<super::RegisterDatapointsRequest>
                    for RegisterDatapointsSvc<T> {
                        type Response = super::RegisterDatapointsReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterDatapointsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Collector>::register_datapoints(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RegisterDatapointsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sdv.databroker.v1.Collector/UpdateDatapoints" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateDatapointsSvc<T: Collector>(pub Arc<T>);
                    impl<
                        T: Collector,
                    > tonic::server::UnaryService<super::UpdateDatapointsRequest>
                    for UpdateDatapointsSvc<T> {
                        type Response = super::UpdateDatapointsReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateDatapointsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Collector>::update_datapoints(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UpdateDatapointsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/sdv.databroker.v1.Collector/StreamDatapoints" => {
                    #[allow(non_camel_case_types)]
                    struct StreamDatapointsSvc<T: Collector>(pub Arc<T>);
                    impl<
                        T: Collector,
                    > tonic::server::StreamingService<super::StreamDatapointsRequest>
                    for StreamDatapointsSvc<T> {
                        type Response = super::StreamDatapointsReply;
                        type ResponseStream = T::StreamDatapointsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::StreamDatapointsRequest>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Collector>::stream_datapoints(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StreamDatapointsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Collector> Clone for CollectorServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Collector> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Collector> tonic::server::NamedService for CollectorServer<T> {
        const NAME: &'static str = "sdv.databroker.v1.Collector";
    }
}
